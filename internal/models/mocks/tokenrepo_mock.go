// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TokenRepository is an autogenerated mock type for the TokenRepository type
type TokenRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: pattern
func (_m *TokenRepository) Count(pattern string) (int, error) {
	ret := _m.Called(pattern)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(pattern)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pattern)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: keys
func (_m *TokenRepository) Delete(keys ...string) error {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(keys...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *TokenRepository) Get(key string) (bool, error) {
	ret := _m.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTokens provides a mock function with given fields: accessKey, accessExp, refreshKey, refreshExp
func (_m *TokenRepository) SetTokens(accessKey string, accessExp time.Duration, refreshKey string, refreshExp time.Duration) error {
	ret := _m.Called(accessKey, accessExp, refreshKey, refreshExp)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Duration, string, time.Duration) error); ok {
		r0 = rf(accessKey, accessExp, refreshKey, refreshExp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
